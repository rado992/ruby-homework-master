# Ретроспекция

Решете първите четири задачи отново. Целта е да постигнете кратки и ясни решения, които да включват всичко, което сте научили след домашното. В решенията си сте допуснали някои грешки. Сега имате възможност да ги оправите. Имате на разположение всички чужди решения, включително и нашите.

Досега не сме видели решения, в които няма какво да се подобри. Това включва и нашите. Ако разгледате десетина, ще ви дойдат идеи. Ще има какво да научите. Ще има какво да подобрите. Опитайте се да направите най-краткия и ясен код, на който сте способни. 

Новите ви решения ще съдържат подобрения над старите. Това са неща, които сте научили. Искаме списък с двадесет такива — по около пет на задача. Това могат да бъдат дребни работи, свързани с Ruby, или по-общи, концептуални неща. Всяко едно трябва да бъде видимо подобрение спрямо предишното ви решение. Например, ако сте научили, че нещо може да стане с <code>map</code> вместо с <code>each</code>, трябва старото ви решение да бъде с <code>each</code>, докато новото - с <code>map</code>.

Ако си мислите, че двадесет неща са много — не се притеснявайте. Просто се опитайте да направите по няколко подобрения на всяко от решенията си.

## Форма на предаване

За да предадете това домашно, трябва да имате [GitHub account](https://github.com/fmi/ruby-retrospective-2). Клонирайте нашето хранилище и променете <code>.rb</code> файловете. Първият ви commit трябва да бъде със старите ви решения във вида, в който сте ги предали в сайта за последен път. Ако не сте предали решение за дадена задача, оставяте файла празен.

Обърнете внимание, че има нови стилови изисквания към всяка от задачите. Можете да ги погледнете просто с:

    $ rake check

Забележете, че през GitHub ще предадете само кода. Научените уроци стават с добре познатата форма в сайта. Този път, вместо цяла ruby програма искаме една дефинирана константа, `REPOSITORY` и списък от неща в коментари. Например:

    REPOSITORY = 'http://github.com/mitio/ruby-retrospective-2'

    # Двадесет неща, които научих.
    #
    # 1. Монадите в Haskell са много широка абстракция. Приложими са на много места,
    #    но това ги прави трудни за научаване. Любимият ми пример е Maybe монадата,
    #    в която верига от операции връща Nothing, ако връзка от веригата върне
    #    Nothing.
    # 2. case клас (в Scala) е по-подходящ за промоция, от стандартен такъв. 
    # 3. Проверката за възраст може да се реализира по-добре с полиморфизъм, отколкото
    #    с case или if.

Разбира се, това е примерен текст. Искаме уроци за Ruby решенията ви, не разсъждения за други забавни езици.

Обърнете внимание, че кодът ви е публичен, но списъкът с двадесетте научени неща не е. Не го споделяйте нито в GitHub, нито във форумите, нито помежду си.

## Оценяване

За тази задача получавате от 1 до 6 точки. Колко точно зависи от двадесете неща и доколко са приложени в решенията ви. Ако имате страхотни решения, но половината от нещата са несериозни, ще получите половината точки. Ако имате невероятни решения и нямате списък от научени неща, ще получите нула точки.

Впрочем, минаващите тестове и стилистична проверка са задължителни. Ако <code>rake check</code> открие дори една грешка в стила или един неуспешен тест, получавате нула точки. Без значение какво сте написали.

## Watchr

Може да пуснете <code>watchr</code> с:

    $ rake watch

Разгледайте си подробностите сами.

## Разни

* Чувствайте се свободни да добавяте коментари в решенията си, казващи какво ви е направило впечатление за дадена конструкция. Или пък да задават въпроси.
* Пишете грамотно. Да съчините двадесет изречения, без те да преливат от пунктуационни, правописни или граматически грешки, не трябва да е особено сложно. Няма да се заяждаме за дреболии, но набиващи се на очи проблеми ще се наказват с отнети точки.
* Чувствайте се свободни да дискутирате всичко във форумите. Този път кодът е публичен. Може да питате каквото искате: "Как да направя това по-добре?", "Това добра идея ли е?", "Не мога да преценя кое от тези две неща е по-удачно", "Тази конструкция ми допада много." и прочее.
